name: Valkey Releases

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Optional custom release tag to build (if empty, use latest)'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check.outputs.new_release }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      major_version: ${{ steps.check.outputs.major_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and check release
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f last_release.txt ]; then
            LAST_RELEASE=$(cat last_release.txt)
          else
            LAST_RELEASE="none"
          fi
          
          LATEST_TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/valkey-io/valkey/releases/latest | jq -r '.tag_name')
          if [ -z "$LATEST_TAG" ]; then echo "Error: Failed to fetch latest tag"; exit 1; fi
          
          if [ "${{ github.event.inputs.release_tag }}" != '' ]; then
            LATEST_TAG="${{ github.event.inputs.release_tag }}"
          fi
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "$LATEST_TAG" != "$LAST_RELEASE" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "$LATEST_TAG" > last_release.txt
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
          
          echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          MAJOR=$(echo "$LATEST_TAG" | cut -d'.' -f1)
          if [ -z "$MAJOR" ]; then echo "Error: Invalid major version"; exit 1; fi
          echo "major_version=$MAJOR" >> $GITHUB_OUTPUT

      - name: Commit last release update
        if: github.event_name == 'schedule' && steps.check.outputs.new_release == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update last processed release to ${{ steps.check.outputs.release_tag }}"
          add: last_release.txt

  build-packages:
    needs: check-release
    if: (github.event_name == 'schedule' && needs.check-release.outputs.new_release == 'true') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - image: "debian:12"
            codename: "bookworm"
          - image: "ubuntu:24.04"
            codename: "noble"
        arch: 
          - amd64
          #- arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update changelog with release version
        run: |
          cd packages/valkey
          if [ ! -f debian/changelog ]; then echo "Changelog not found!"; exit 1; fi
          sed -i "1s/^.*$/valkey (${{ needs.check-release.outputs.release_tag }}-1~${{ matrix.os.codename }}) ${{ matrix.os.codename }}; urgency=medium/" debian/changelog

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build deb packages in Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: packages/valkey/Dockerfile
          platforms: linux/${{ matrix.arch }}
          build-args: |
            DISTRO=${{ matrix.os.image }}
            RELEASE_TAG=${{ needs.check-release.outputs.release_tag }}
            MAJOR=${{ needs.check-release.outputs.major_version }}
            ARCH=${{ matrix.arch }}
          outputs: type=local,dest=./build/${{ matrix.os.codename }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os.codename }}-${{ matrix.arch }}
          path: ./build/${{ matrix.os.codename }}-${{ matrix.arch }}/*.deb

  create-repo:
    needs: [check-release, build-packages]
    if: (github.event_name == 'schedule' && needs.check-release.outputs.new_release == 'true') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout existing apt branch
        uses: actions/checkout@v4
        with:
          ref: apt
          path: repo
        continue-on-error: true

      - name: Set up reprepro and tools
        run: |
          sudo apt update
          sudo apt install -y reprepro gh jq

      - name: Download all packages artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: ./downloaded-artifacts

      - name: List downloaded artifacts
        run: ls -R ./downloaded-artifacts

      - name: Include packages dynamically
        run: |
          MAJOR="${{ needs.check-release.outputs.major_version }}"
          CODENAME="valkey$MAJOR"
          mkdir -p repo/reprepro/conf
          DISTRIBUTIONS_FILE="repo/reprepro/conf/distributions"
          if [ ! -f "$DISTRIBUTIONS_FILE" ]; then
            touch "$DISTRIBUTIONS_FILE"
          fi
          
          # Process each downloaded artifact directory
          for artifact_dir in ./downloaded-artifacts/*; do
            if [ ! -d "$artifact_dir" ]; then continue; fi
            
            artifact_name=$(basename "$artifact_dir")
            component=$(echo "$artifact_name" | cut -d'-' -f2)
            arch=$(echo "$artifact_name" | cut -d'-' -f3)
            
            echo "Processing: component=$component, arch=$arch, dir=$artifact_dir"
            
            # Add or update section in distributions
            if ! grep -q "Codename: $CODENAME" "$DISTRIBUTIONS_FILE"; then
              echo -e "\nCodename: $CODENAME\nComponents: $component\nArchitectures: $arch" >> "$DISTRIBUTIONS_FILE"
            else
              CURRENT_COMPONENTS=$(sed -n "/Codename: $CODENAME/{n;p}" "$DISTRIBUTIONS_FILE" | grep "Components:" | cut -d' ' -f2- | tr -s ' ')
              if ! echo "$CURRENT_COMPONENTS" | grep -q "$component"; then
                NEW_COMPONENTS="$CURRENT_COMPONENTS $component"
                sed -i "/Codename: $CODENAME/{n;s/^Components: .*/Components: $NEW_COMPONENTS/}" "$DISTRIBUTIONS_FILE"
              fi
              
              CURRENT_ARCH=$(sed -n "/Codename: $CODENAME/{n;n;p}" "$DISTRIBUTIONS_FILE" | grep "Architectures:" | cut -d' ' -f2- | tr -s ' ')
              if ! echo "$CURRENT_ARCH" | grep -q "$arch"; then
                NEW_ARCH="$CURRENT_ARCH $arch"
                sed -i "/Codename: $CODENAME/{n;n;s/^Architectures: .*/Architectures: $NEW_ARCH/}" "$DISTRIBUTIONS_FILE"
              fi
            fi
            
            # Include debs
            deb_files=("$artifact_dir"/*.deb)
            if [ ${#deb_files[@]} -eq 0 ]; then
              echo "No .deb files in $artifact_dir, skipping"
              continue
            fi
            
            echo "Including ${#deb_files[@]} debs into $CODENAME/$component"
            reprepro -b repo/reprepro --component $component includedeb $CODENAME "$artifact_dir"/*.deb
          done
          
          # Export the distribution
          reprepro -b repo/reprepro export $CODENAME
          echo "Export completed for $CODENAME"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          publish_branch: apt
          keep_files: true
          force_orphan: true
          commit_message: "Update APT repo for Valkey ${{ needs.check-release.outputs.release_tag }}"


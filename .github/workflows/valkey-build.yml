name: Check and Build Valkey Releases

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new release (true/false)'
        required: false
        default: 'false'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check.outputs.new_release }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      major_version: ${{ steps.check.outputs.major_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get last processed release
        id: last
        run: |
          if [ -f last_release.txt ]; then
            LAST_RELEASE=$(cat last_release.txt)
          else
            LAST_RELEASE="none"
          fi
          echo "LAST_RELEASE=$LAST_RELEASE" >> $GITHUB_ENV

      - name: Fetch latest Valkey release
        id: fetch
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/valkey-io/valkey/releases/latest | jq -r '.tag_name')
          if [ -z "$LATEST_TAG" ]; then echo "Error: Failed to fetch latest tag"; exit 1; fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check if new release and parse major version
        id: check
        run: |
          if [ "${{ env.LATEST_TAG }}" != "${{ env.LAST_RELEASE }}" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "${{ env.LATEST_TAG }}" > last_release.txt
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
          echo "release_tag=${{ env.LATEST_TAG }}" >> $GITHUB_OUTPUT
          MAJOR=$(echo "${{ env.LATEST_TAG }}" | cut -d'.' -f1)
          if [ -z "$MAJOR" ]; then echo "Error: Invalid major version"; exit 1; fi
          echo "major_version=$MAJOR" >> $GITHUB_OUTPUT

      - name: Commit last release update
        if: steps.check.outputs.new_release == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update last processed release to ${{ env.LATEST_TAG }}"
          add: last_release.txt

  build-packages:
    needs: check-release
    if: needs.check-release.outputs.new_release == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: 
          - amd64
          # - arm64
        include:
          - image: debian:12
            codename: bookworm
          # - image: ubuntu:24.04
          #   codename: noble

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update changelog with release version
        run: |
          cd packages/valkey
          if [ ! -f debian/changelog ]; then echo "Changelog not found!"; exit 1; fi
          sed -i "1s/^.*$/valkey (${{ needs.check-release.outputs.release_tag }}-1~${{ matrix.codename }}) ${{ matrix.codename }}; urgency=medium/" debian/changelog

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build deb packages in Docker
        run: |
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg DISTRO=${{ matrix.image }} \
            --build-arg RELEASE_TAG=${{ needs.check-release.outputs.release_tag }} \
            --build-arg MAJOR=${{ needs.check-release.outputs.major_version }} \
            --build-arg ARCH=${{ matrix.arch }} \
            --output type=local,dest=./build/${{ matrix.codename }}-${{ matrix.arch }} \
            -f packages/valkey/Dockerfile .

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.codename }}-${{ matrix.arch }}
          path: ./build/${{ matrix.codename }}-${{ matrix.arch }}/*.deb

  create-repo:
    needs: [check-release, build-packages]
    if: needs.check-release.outputs.new_release == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout existing gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: repo
        continue-on-error: true

      - name: Set up reprepro and tools
        run: |
          sudo apt update
          sudo apt install -y reprepro gh jq

      - name: Download and include packages dynamically
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          MAJOR="${{ needs.check-release.outputs.major_version }}"
          CODENAME="valkey$MAJOR"
          mkdir -p repo/reprepro/conf
          DISTRIBUTIONS_FILE="repo/reprepro/conf/distributions"
          if [ ! -f "$DISTRIBUTIONS_FILE" ]; then
            touch "$DISTRIBUTIONS_FILE"
          fi
          
          # Get current workflow run ID
          RUN_ID=${{ github.run_id }}
          
          # Get list of artifact names via GitHub API (only names, minimal jq)
          ARTIFACT_NAMES=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts | jq -r '.artifacts | map(select(.name | startswith("packages-"))).name')
          if [ -z "$ARTIFACT_NAMES" ]; then
            echo "Error: No packages artifacts found!"; exit 1;
          fi
          
          # Loop through each artifact name
          echo "$ARTIFACT_NAMES" | while read artifact_name; do
            # Extract codename and arch from name (e.g., packages-bookworm-amd64 -> codename=bookworm, arch=amd64)
            component=$(echo "$artifact_name" | cut -d'-' -f2)
            arch=$(echo "$artifact_name" | cut -d'-' -f3)
            
            echo "Processing $artifact_name (CODENAME=$CODENAME, component=$component, arch=$arch)"
            
            # Add or update section in distributions if not exists
            if ! grep -q "Codename: $CODENAME" "$DISTRIBUTIONS_FILE"; then
              echo -e "\nCodename: $CODENAME\nComponents: $component\nArchitectures: $arch" >> "$DISTRIBUTIONS_FILE"
            else
              # Add component if not already present
              CURRENT_COMPONENTS=$(sed -n "/Codename: $CODENAME/{n;p}" "$DISTRIBUTIONS_FILE" | grep "Components:" | cut -d' ' -f2-)
              if ! echo "$CURRENT_COMPONENTS" | grep -q "$component"; then
                NEW_COMPONENTS="$CURRENT_COMPONENTS $component"
                sed -i "/Codename: $CODENAME/{n;s/^Components: .*/Components: $NEW_COMPONENTS/}" "$DISTRIBUTIONS_FILE"
              fi
              
              # Add arch if not already present
              CURRENT_ARCH=$(sed -n "/Codename: $CODENAME/{n;n;p}" "$DISTRIBUTIONS_FILE" | grep "Architectures:" | cut -d' ' -f2-)
              if ! echo "$CURRENT_ARCH" | grep -q "$arch"; then
                NEW_ARCH="$CURRENT_ARCH $arch"
                sed -i "/Codename: $CODENAME/{n;n;s/^Architectures: .*/Architectures: $NEW_ARCH/}" "$DISTRIBUTIONS_FILE"
              fi
            fi
            
            # Download and process packages
            temp_dir="temp_pool/$component/$arch"
            mkdir -p "$temp_dir"
            
            gh run download $RUN_ID -n "$artifact_name" -D "$temp_dir" || { echo "Failed to download $artifact_name, skipping"; continue; }
            
            if ls "$temp_dir"/*.deb > /dev/null 2>&1; then
              reprepro -b repo includedeb $CODENAME "$temp_dir"/*.deb --component $component
            else
              echo "No .deb files found in $temp_dir, skipping"
            fi
            
            rm -rf "$temp_dir"
          done
          
          # Export the distribution to update Release files (includes old packages in all components)
          reprepro -b repo export $CODENAME

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          publish_branch: gh-pages
          keep_files: true
          commit_message: "Update APT repo for Valkey ${{ needs.check-release.outputs.release_tag }}"


name: Check and Build Valkey Releases

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new release (true/false)'
        required: false
        default: 'false'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check.outputs.new_release }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      major_version: ${{ steps.check.outputs.major_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get last processed release
        id: last
        run: |
          if [ -f last_release.txt ]; then
            LAST_RELEASE=$(cat last_release.txt)
          else
            LAST_RELEASE="none"
          fi
          echo "LAST_RELEASE=$LAST_RELEASE" >> $GITHUB_ENV

      - name: Fetch latest Valkey release
        id: fetch
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/valkey-io/valkey/releases/latest | jq -r '.tag_name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check if new release and parse major version
        id: check
        run: |
          if [ "${{ env.LATEST_TAG }}" != "${{ env.LAST_RELEASE }}" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "${{ env.LATEST_TAG }}" > last_release.txt
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
          echo "release_tag=${{ env.LATEST_TAG }}" >> $GITHUB_OUTPUT
          MAJOR=$(echo "${{ env.LATEST_TAG }}" | cut -d'.' -f1)
          echo "major_version=$MAJOR" >> $GITHUB_OUTPUT

      - name: Commit last release update
        if: steps.check.outputs.new_release == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update last processed release to ${{ env.LATEST_TAG }}"
          add: last_release.txt

  build-packages:
    needs: check-release
    if: needs.check-release.outputs.new_release == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: 
          - debian:12
          # - ubuntu:24.04
        arch:
          - amd64
          # - arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update changelog with release version
        run: |
          cd packages/valkey
          if [ ! -f debian/changelog ]; then echo "Changelog not found!"; exit 1; fi
          sed -i "1s/.*/valkey (${{ needs.check-release.outputs.release_tag }}-1) unstable; urgency=medium/" debian/changelog

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Sanitize distro name
        id: sanitize
        run: echo "distro="${{ matrix.distro//[:\"<>|*?\\\/] }}"" >>"$GITHUB_OUTPUT"

      - name: Build deb packages in Docker
        run: |
          docker buildx build --platform linux/${{ matrix.arch }} \
            --build-arg DISTRO=${{ matrix.distro }} \
            --build-arg RELEASE_TAG=${{ needs.check-release.outputs.release_tag }} \
            --build-arg MAJOR=${{ needs.check-release.outputs.major_version }} \
            --build-arg ARCH=${{ matrix.arch }} \
            --output type=local,dest=./build/${{ matrix.distro }}-${{ matrix.arch }} \
            -f packages/valkey/Dockerfile .

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ steps.sanitize.outputs.distro }}-${{ matrix.arch }}
          path: ./build/${{ matrix.distro }}-${{ matrix.arch }}/*.deb

  create-repo:
    needs: [check-release, build-packages]
    if: needs.check-release.outputs.new_release == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout existing gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: repo
        continue-on-error: true

      - name: Set up reprepro and tools
        run: |
          sudo apt update
          sudo apt install -y reprepro gh jq

      - name: Download and include packages using GitHub API
        run: |
          CODENAME="valkey${{ needs.check-release.outputs.major_version }}"
          mkdir -p repo/reprepro/conf
          if [ ! -f repo/reprepro/conf/distributions ]; then
            cp reprepro/conf/distributions repo/reprepro/conf/distributions 2>/dev/null || \
              echo -e "Codename: stable\nComponents: main\nArchitectures: amd64" > repo/reprepro/conf/distributions
          fi
          sed -i "s/Codename: .*/Codename: $CODENAME/" repo/reprepro/conf/distributions
          
          # Get current workflow run ID
          RUN_ID=${{ github.run_id }}
          # Get list of all artifacts via GitHub API (filter packages-*)
          ARTIFACTS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts | jq '.artifacts | map(select(.name | startswith("packages-")))')
          
          # List of unique architectures from artifacts (for reprepro conf)
          ARCH_LIST=$(echo "$ARTIFACTS_JSON" | jq -r '.[].name | split("-")[2]' | sort | uniq | paste -s -d ' ')
          sed -i "s/^Architectures: .*/Architectures: $ARCH_LIST/" repo/reprepro/conf/distributions
          
          # Loop through each artifact
          ARTIFACT_NAMES=$(echo "$ARTIFACTS_JSON" | jq -r '.[].name')
          for artifact_name in $ARTIFACT_NAMES; do
            # Extract distro and arch from name (e.g., packages-debian:12-amd64 -> distro=debian:12, arch=amd64)
            distro=$(echo "$artifact_name" | cut -d'-' -f2)
            arch=$(echo "$artifact_name" | cut -d'-' -f3)
            
            echo "Downloading and processing $artifact_name (distro=$distro, arch=$arch)"
            pool_dir="repo/pool/${distro//:/}/$arch"  # e.g., repo/pool/debian12/amd64
            mkdir -p "$pool_dir"
            
            # Download artifact
            gh artifact download --name "$artifact_name" --dir "$pool_dir" || echo "Failed to download $artifact_name, skipping"
            
            # Include debs in reprepro if files exist
            if ls "$pool_dir"/*.deb > /dev/null 2>&1; then
              reprepro -b repo includedeb $CODENAME "$pool_dir"/*.deb
            fi
          done
          
          # Generate Release files
          reprepro -b repo export $CODENAME

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          publish_branch: gh-pages
          keep_files: true
          commit_message: "Update APT repo for Valkey ${{ needs.check-release.outputs.release_tag }} in $CODENAME"
